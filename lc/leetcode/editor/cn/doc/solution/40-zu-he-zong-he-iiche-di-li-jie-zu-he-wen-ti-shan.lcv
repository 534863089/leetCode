# 思路

> **如果对回溯算法基础还不了解的话，可以看一下我的视频：[带你学透回溯算法（理论篇）B站视频](https://www.bilibili.com/video/BV1cy4y167mM/)**  结合这题解一起看，希望对你理解回溯算法有所帮助！

这道题目和 39.组合总和 如下区别：

1. 本题candidates 中的每个数字在每个组合中只能使用一次。
2. 本题数组candidates的元素是有重复的，而 39.组合总和 是无重复元素的数组candidates

最后本题和 39.组合总和 要求一样，解集不能包含重复的组合。

**本题的难点在于区别2中：集合（数组candidates）有重复元素，但还不能有重复的组合**。

一些同学可能想了：我把所有组合求出来，再用set或者map去重，这么做很容易超时！

所以要在搜索的过程中就去掉重复组合。

很多同学在去重的问题上想不明白，其实很多题解也没有讲清楚，反正代码是能过的，感觉是那么回事，稀里糊涂的先把题目过了。

这个去重为什么很难理解呢，**所谓去重，其实就是使用过的元素不能重复选取。** 这么一说好像很简单！

都知道组合问题可以抽象为树形结构，那么“使用过”在这个树形结构上是有两个维度的，一个维度是同一树枝上使用过，一个维度是同一树层上使用过。**没有理解这两个层面上的“使用过” 是造成大家没有彻底理解去重的根本原因。**

那么问题来了，我们是要同一树层上使用过，还是统一树枝上使用过呢？

回看一下题目，元素在同一个组合内是可以重复的，怎么重复都没事，但两个组合不能相同。

**所以我们要去重的是同一树层上的“使用过”，同一树枝上的都是一个组合里的元素，不用去重**。

为了理解去重我们来举一个例子，candidates = [1, 1, 2], target = 3，（方便起见candidates已经排序了）

选择过程树形结构如图所示：

![40.组合总和II.png](https://pic.leetcode-cn.com/1604390529-inLFJH-40.%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8CII.png)

可以看到图中，每个节点相对于  39.组合总和 我多加了used数组，这个used数组下面会重点介绍。

## 回溯三部曲

* **递归函数参数**

与 39.组合总和 套路相同，此题还需要加一个bool型数组used，用来记录同一树枝上的元素是否使用过。

这个集合去重的重任就是used来完成的。

代码如下：

* 

```
vector<vector<int>> result; // 存放组合集合
vector<int> path;           // 符合条件的组合
void backtracking(vector<int>& candidates, int target, int sum, int startIndex, vector<bool>& used) {
```

* **递归终止条件**

与 39.组合总和 相同，终止条件为 `sum > target` 和 `sum == target`。

代码如下：

* C++

```C++
if (sum > target) { // 这个条件其实可以省略 
    return;
}
if (sum == target) {
    result.push_back(path);
    return;
}
```

`sum > target`  这个条件其实可以省略，因为和在递归单层遍历的时候，会有剪枝的操作，下面会介绍到。

* **单层搜索的逻辑**

这里与 39.组合总和 最大的不同就是要去重了。

前面我们提到：要去重的是“同一树层上的使用过”，如果判断同一树层上元素（相同的元素）是否使用过了呢。

**如果`candidates[i] == candidates[i - 1]` 并且 `used[i - 1] == false`，就说明：前一个树枝，使用了candidates[i - 1]，也就是说同一树层使用过candidates[i - 1]**。

此时for循环里就应该做continue的操作。

这块比较抽象，如图：

![40.组合总和II1.png](https://pic.leetcode-cn.com/1604390551-uPEKll-40.%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8CII1.png)

我在图中将used的变化用橘黄色标注上，可以看出在candidates[i] == candidates[i - 1]相同的情况下：

* used[i - 1] == true，说明同一树支candidates[i - 1]使用过
* used[i - 1] == false，说明同一树层candidates[i - 1]使用过

**这块去重的逻辑很抽象，网上搜的题解基本没有能讲清楚的，如果大家之前思考过这个问题或者刷过这道题目，看到这里一定会感觉通透了很多！**

那么单层搜索的逻辑代码如下：

* C++

```C++
for (int i = startIndex; i < candidates.size() && sum + candidates[i] <= target; i++) {
    // used[i - 1] == true，说明同一树支candidates[i - 1]使用过
    // used[i - 1] == false，说明同一树层candidates[i - 1]使用过
    // 要对同一树层使用过的元素进行跳过
    if (i > 0 && candidates[i] == candidates[i - 1] && used[i - 1] == false) {
        continue;
    }
    sum += candidates[i];
    path.push_back(candidates[i]);
    used[i] = true;
    backtracking(candidates, target, sum, i + 1, used); // 和39.组合总和的区别1：这里是i+1，每个数字在每个组合中只能使用一次
    used[i] = false;
    sum -= candidates[i];
    path.pop_back();
}
```

**注意sum + candidates[i] <= target为剪枝操作**

回溯三部曲分析完了，整体C++代码如下：

* C++

```C++
class Solution {
private:
    vector<vector<int>> result;
    vector<int> path;
    void backtracking(vector<int>& candidates, int target, int sum, int startIndex, vector<bool>& used) {
        if (sum == target) {
            result.push_back(path);
            return;
        }
        for (int i = startIndex; i < candidates.size() && sum + candidates[i] <= target; i++) {
            // used[i - 1] == true，说明同一树支candidates[i - 1]使用过
            // used[i - 1] == false，说明同一树层candidates[i - 1]使用过
            // 要对同一树层使用过的元素进行跳过
            if (i > 0 && candidates[i] == candidates[i - 1] && used[i - 1] == false) {
                continue;
            }
            sum += candidates[i];
            path.push_back(candidates[i]);
            used[i] = true;
            backtracking(candidates, target, sum, i + 1, used); // 和39.组合总和的区别1，这里是i+1，每个数字在每个组合中只能使用一次
            used[i] = false;
            sum -= candidates[i];
            path.pop_back();
        }
    }

public:
    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
        vector<bool> used(candidates.size(), false);
        path.clear();
        result.clear();
        // 首先把给candidates排序，让其相同的元素都挨在一起。
        sort(candidates.begin(), candidates.end());
        backtracking(candidates, target, 0, 0, used);
        return result;
    }
};

```

## 补充

这里直接用startIndex来去重也是可以的， 就不用used数组了。

* C++

```C++
class Solution {
private:
    vector<vector<int>> result;
    vector<int> path;
    void backtracking(vector<int>& candidates, int target, int sum, int startIndex) {
        if (sum == target) {
            result.push_back(path);
            return;
        }
        for (int i = startIndex; i < candidates.size() && sum + candidates[i] <= target; i++) {
            // 要对同一树层使用过的元素进行跳过
            if (i > startIndex && candidates[i] == candidates[i - 1]) {
                continue;
            }
            sum += candidates[i];
            path.push_back(candidates[i]);
            backtracking(candidates, target, sum, i + 1); // 和39.组合总和的区别1，这里是i+1，每个数字在每个组合中只能使用一次
            sum -= candidates[i];
            path.pop_back();
        }
    }

public:
    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
        path.clear();
        result.clear();
        // 首先把给candidates排序，让其相同的元素都挨在一起。
        sort(candidates.begin(), candidates.end());
        backtracking(candidates, target, 0, 0);
        return result;
    }
};

```

# 总结

本题同样是求组合总和，但就是因为其数组candidates有重复元素，而要求不能有重复的组合，所以相对于 39.组合总和 难度提升了不少。

**关键是去重的逻辑，代码很简单，网上一搜一大把，但几乎没有能把这块代码含义讲明白的，基本都是给出代码，然后说这就是去重了，究竟怎么个去重法也是模棱两可**。

所以Carl有必要把去重的这块彻彻底底的给大家讲清楚！

## 其他语言版本

python used数组版本:

* python

```python
class Solution:
    def combinationSum2(self, candidates: List[int], target: int) -> List[List[int]]:
        res=[]
        currentSum=0
        path=[]
        used=[False]*len(candidates)
        # 首先把给candidates排序，让其相同的元素都挨在一起。
        candidates.sort()

        def backtracking(candidates, target, startIndex, path, currentSum, used):
            if currentSum==target:
                res.append(path.copy())
                return

            for i in range(startIndex, len(candidates)):
                if currentSum>target:
                    break
                # used[i - 1] == true，说明同一树支candidates[i - 1]使用过
                # used[i - 1] == false，说明同一树层candidates[i - 1]使用过
                # 要对同一树层使用过的元素进行跳过
                if i>0 and candidates[i]==candidates[i-1] and used[i-1]==False:
                    continue
                path.append(candidates[i])
                currentSum+=candidates[i]
                used[i]=True
                backtracking(candidates, target, i+1, path, currentSum, used)  # 和 39.组合总和的区别1，这里是i+1，每个数字在每个组合中只能使用一次
                used[i]=False
                currentSum-=candidates[i]
                path.pop()
            return None
        backtracking(candidates, target, 0, path, currentSum, used)
        return res
```

java startIndex版本:

* java

```java
class Solution {
    LinkedList<List<Integer>> res = new LinkedList();
    LinkedList<Integer> track = new LinkedList();
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        Arrays.sort(candidates);
        backtracking(candidates,target,0,0);
        return res;
    }
    public void backtracking(int[] candidates, int target, int sum, int startIndex){
        if(sum==target){
            res.add(new LinkedList(track));
            return;
        }
        for(int i = startIndex; i<candidates.length && sum+candidates[i]<=target;i++){
            if(i>startIndex && candidates[i]==candidates[i-1]){
                continue;
            }
            sum += candidates[i];
            track.add(candidates[i]);
            backtracking(candidates,target,sum,i+1);
            sum -= candidates[i];
            track.removeLast();
        }
    }
}
```

java used数组版本:

* java

```java
class Solution {
    //存放结果
    List<List<Integer>> result = new ArrayList<>();
    //暂存结果
    List<Integer> path = new ArrayList<>();
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        Arrays.sort(candidates);
        Boolean[]used = new Boolean[candidates.length];
       //不全初始化为false可能会报空指针异常,因为Boolean类型数组初始化时默认元素为null
        Arrays.fill(used,false );
        backTrack(candidates, target, 0, 0, used);
        return result;
    }

    private void backTrack(int[] candidates, int target, int sum, int startIndex, Boolean[] used) {
        if (sum > target) {
            return;
        }
        if (sum == target) {
            result.add(new ArrayList<>(path));
            return;
        }
        for (int i = startIndex; i < candidates.length && sum + candidates[i] <=
                target; i++) {
            // used[i - 1] == true，说明同⼀树⽀candidates[i - 1]使⽤过
            // used[i - 1] == false，说明同⼀树层candidates[i - 1]使⽤过
            // 要对同⼀树层使⽤过的元素进⾏跳过
            if (i > 0 && candidates[i] == candidates[i - 1] && used[i - 1] == false) {
                continue;
            }
            path.add(candidates[i]);
            sum += candidates[i];
            used[i] = true;
            backTrack(candidates, target, sum, i + 1, used);//这⾥是i+1，每个数字在每个组合中只能使⽤⼀次的数
            sum -= candidates[i]; //回溯
            used[i] = false;//回溯
            path.remove(path.size() - 1);//回溯
        }
    }
}

```

swift  startIndex 版本：

* swift

```swift
class Solution:
    def combinationSum2(self, candidates: List[int], target: int) -> List[List[int]]:
        if sum(candidates) < target:
            return []
        #先把candidates排序一下
        candidates.sort()
        #首先确定一下回溯函数的参数，首先我们需要一个列表path来存放符合条件的结果，然后我们需要res来存放结果的集合，这两个变量都应该是全局变量
        #然后我们需要一个cur_sum来表示是当前和  target为题目中要求的数字和 start表示开始的下标
        def backtracing(path, target, cur_sum, start):
            #剪枝
            if cur_sum > target:
                return 
            #终止条件
            if cur_sum == target:
                res.append(path[:])
                return
                # if path[:] not in res:
                #     res.append(path[:])
                #     return 
                # return
            
            #然后进行单层搜索
            for i in range(start, len(candidates)):
                #如何巧妙地避开重复！！！
                if i > start and candidates[i] == candidates[i-1]:
                    continue
                path.append(candidates[i])#处理，添加元素
                cur_sum += candidates[i]#处理，添加和
                backtracing(path, target, cur_sum, i + 1)
                cur_sum -= candidates[i]#回溯，减去和
                path.pop()#回溯，弹出i
            
        path = []
        res = []
        backtracing(path, target, 0, 0)
        return res
```

**如果感觉题解对你有帮助，不要吝啬给一个👍吧！**

------------

**点击[我的头像](https://mp.weixin.qq.com/s/_DzddsMeQW5JPI6qoC7ARQ)**，查看力扣详细刷题攻略，你会发现相见恨晚！
